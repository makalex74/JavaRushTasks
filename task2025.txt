package com.javarush.task.task20.task2025;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Set;
import java.util.TreeSet;

import static java.lang.Math.pow;

/* 
Алгоритмы-числа
*/
public class Solution {

    private static long[][] powMatrix = new long[10][21];

    static {
        // Генерируем матрицу степеней
        generatePowMatrix();
    }

    public static long[] getNumbers(long N) {
        // Чисел армстронга в промежутке от 0 до Long.MAX_VALUE - 50 шт
        long[] armstrongNumbers = null;
        if (N > 0 && N <= Long.MAX_VALUE) {
            // Заполняем список числами армстронга
            Set<Long> numbers = findArmstrongNumbers(N);

            int count = 0;
            armstrongNumbers = new long[numbers.size()];
            for (long l : numbers) {
                if (l <=N)  armstrongNumbers[count++] = l;
            }
        }
        return armstrongNumbers;
    }

    // Находим и возращаем числа армстронга
    private static Set<Long> findArmstrongNumbers(long N) {
        Set<Long> armstrongNumbers = new TreeSet<>();
        long num = 0;

        while (num >= 0) {
            if (num % 10 == 9) num = getRightNumber(num);
            else num++;

            //System.out.println("num = " + num);
            /*
            Проверяем полученное число, а так же число с добавлением 1-го, 2-ух и 3-ех
            нулей в конце на соответсвите числу Армстронга
             */
            for (int i = 1; i <= 1000 ; i *= 10) {
                long number = num * i;
                //System.out.println("number = " + number);
                // Если число не вышло за пределы Long, проверяем его на соответсвие
                // числу Армстронга и добавляем, если его еще нет в листе.
                if (number >= 0) {
                    long a = powerSum(number);
                    if (a < 0) continue;

                    long armstrongNum;
                    if (a == number) armstrongNum = number;
                    else if (a == powerSum(a)) armstrongNum = a;
                    else continue;

                    if (armstrongNum >= N) break;
                    armstrongNumbers.add(armstrongNum);
                } else {
                    break;
                }
            }
        }
        return armstrongNumbers;
    }

    // Получаем правильное число для поиска чисел Армстронга. 19 -> 22, 199 -> 222 ...
    private static long getRightNumber(long num) {
        int count = 1;
        long tail;
        while (true) {
            tail = (num % 10);
            if (tail != 9) {
                num -= tail;
                tail++;
                num += tail;
                break;
            }
            count++;
            num -= 9;
            num /= 10;
        }
        for (int i = 1; i < count; i++) {
            num *= 10;
            num += tail;
        }
        return num;
    }

/*    public static long[] getNumbers(long N) {

        long[] result = null;
        try {
            ArrayList<Long> list = new ArrayList<>();
            for (long i = 1; i <= N; i++) {
                if (i == powerSum(i)) {
              //System.out.println("i =" + i);
              //System.out.println("powerSum(i) =" + powerSum(i));
                    list.add(i);
                }
            }
            result = new long[list.size()];
            for (int i = 0; i < list.size(); i++) {
                result[i] = list.get(i);
            }
            list.clear();
        } catch (Exception e){
            return result;
        };
        return result;
    }*/

/*    public static long getNumber(long S){
        long res = 0;
        String num = Long.toString(S);
        int M = num.length();
        char[] chArr = num.toCharArray();
        for (int i=0; i<chArr.length; i++){
            res += pow(Integer.parseInt(Character.toString(chArr[i])), M);
        }
        return res;
    }*/

    /**
     * Возвращает степенную сумму числа
     *
     * @param n Любое long число
     * @return степенную сумму числа
     */
    private static long powerSum(long n) {
        if (n < 10) {
            return n;
        }

        int length = 1;
        long copyN = n;
        while (copyN >= 10) {
            copyN /= 10;
            length++;
        }

        long result = 0;
        while (true) {
            int num = (int) (n % 10);
            result += powMatrix[num][length];

            if (n < 10) break;

            n = n / 10;
        }
        return result;
    }

    /**
     * Генерируем матрицу степеней, работает вместе с pow()
     */
    private static void generatePowMatrix() {
        for (int i = 1; i < powMatrix.length; i++) {  //powMatrix.length = 10
            for (int j = 1; j < powMatrix[i].length; j++) { //powMatrix[i].length = 21
                powMatrix[i][j] = pow(i, j);
                //System.out.print(powMatrix[i][j]+ " ");
            }
            //System.out.println();
        }

    }

    static long pow(int a, int b) {
        long result = 1;
        if (a == 0) {
            return 0;
        }
        if (a == 1) {
            return 1;
        }
        for (int i = 1; i <= b; i++) {
            result = result * a;
        }
        return result;
    }

    public static void main(String[] args) {
/*        long a = System.currentTimeMillis();
        System.out.println(Arrays.toString(getNumbers(Long.MAX_VALUE)));
        checkArmstrongNumbers(getNumbers(Long.MAX_VALUE));
        long b = System.currentTimeMillis();
        System.out.println("memory " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (8 * 1024));
        System.out.println("time = " + (b - a) / 1000);*/

/*        a = System.currentTimeMillis();
        System.out.println(Arrays.toString(getNumbers(10000000)));
        //checkArmstrongNumbers(getNumbers(10000000));
        b = System.currentTimeMillis();
        System.out.println("memory " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (8 * 1024));
        System.out.println("time = " + (b - a) / 1000);*/

/*        a = System.currentTimeMillis();
        System.out.println(Arrays.toString(getNumbers(Long.MAX_VALUE)));
        b = System.currentTimeMillis();
        System.out.println("memory " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (8 * 1024));
        System.out.println("time = " + (b - a) / 1000);*/
    }

    /**
     * Ниже код для проверки
     */
    private static void checkArmstrongNumbers(long[] numbers) {
        long[] armstrongNumbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407, 1634, 8208, 9474, 54748, 92727, 93084, 548834, 1741725, 4210818, 9800817, 9926315, 24678050, 24678051, 88593477, 146511208, 472335975, 534494836, 912985153, 4679307774L, 32164049650L, 32164049651L, 40028394225L, 42678290603L, 44708635679L, 49388550606L, 82693916578L, 94204591914L, 28116440335967L, 4338281769391370L, 4338281769391371L, 21897142587612075L, 35641594208964132L, 35875699062250035L, 1517841543307505039L, 3289582984443187032L, 4498128791164624869L, 4929273885928088826L};
        for (int i = 0; i < armstrongNumbers.length; i++) {
            if (numbers[i] != armstrongNumbers[i]) {
                System.out.println("Числа Армстронга не совпадают");
                System.out.println(numbers[i] + " != " + armstrongNumbers[i]);
                break;
            }
        }
    }
}
